function [allMiceBeforeCueAnalysis, allMiceAfterCueAnalysis] = analyzeNosepoke(trialTS, timeWindowBefore, timeWindowAfter, factor, sucroseDelay)
% Assuming each field in trialTS is a 1x16 cell, each containing nx1 double arrays for each mouse

% Set default arguments if not provided
if nargin < 2 || isempty(timeWindowBefore), timeWindowBefore = 30; end
if nargin < 3 || isempty(timeWindowAfter), timeWindowAfter = 30; end
if nargin < 4 || isempty(factor), factor = 100; end
if nargin < 5 || isempty(sucroseDelay), sucroseDelay = 1; end

% Determine the number of mice
n_mice = length(trialTS.CueTS);

% Initialize results for all mice
allMiceBeforeCueAnalysis = cell(1, n_mice);
allMiceAfterCueAnalysis = cell(1, n_mice);

for mouseIdx = 1:n_mice
    % Extract trials for the current mouse across all fields
    mouseTrialTS = struct();
    fieldNames = fieldnames(trialTS);
    for fieldIdx = 1:length(fieldNames)
        fieldName = fieldNames{fieldIdx};
        mouseTrialTS.(fieldName) = trialTS.(fieldName){mouseIdx};
    end

    % Process trials for the current mouse
    n_trials = length(mouseTrialTS.CueTS);
    beforeCueAnalysis = repmat(struct('rewardedNosepokes', [], 'unrewardedNosepokes', [], 'probRewardedNosepoke', [],...
        'unrewardedBetweenRewarded', [], 'latencyRewarded', [], 'latencyUnRewarded', [], 'rewardPortDurations', [],...
        'portEntryBetweenRewardedNosepokes', []), n_trials, 1);
    afterCueAnalysis = beforeCueAnalysis;

    for i = 1:n_trials
        cueTime = mouseTrialTS.CueTS(i);
        beforeStart = cueTime - (timeWindowBefore * factor);
        afterEnd = cueTime + (timeWindowAfter * factor);

        % Filter timestamps for before and after tone onset
        before = filterTimestamps(beforeStart, cueTime, mouseTrialTS);
        after = filterTimestamps(cueTime, afterEnd, mouseTrialTS);

        % Analyze behavior for each period
        beforeCueAnalysis(i) = analyzePeriod(before, cueTime, sucroseDelay, factor);
        afterCueAnalysis(i) = analyzePeriod(after, cueTime, sucroseDelay, factor);
    end

    % Store results for the current mouse
    allMiceBeforeCueAnalysis{mouseIdx} = beforeCueAnalysis;
    allMiceAfterCueAnalysis{mouseIdx} = afterCueAnalysis;
end
end




function period = filterTimestamps(start, stop, trialTS)
% Adjusted to directly handle the structure format and specific logic for PortEntryTS and PortExitTS
periodNames = fieldnames(trialTS);
period = struct();
for idx = 1:length(periodNames)
    fieldName = periodNames{idx};
    timestamps = trialTS.(fieldName);

    if strcmp(fieldName, 'PortEntryTS') || strcmp(fieldName, 'PortExitTS')
        % Special handling for PortEntryTS and PortExitTS
        validEntries = trialTS.PortEntryTS >= start & trialTS.PortEntryTS <= stop;
        period.PortEntryTS = trialTS.PortEntryTS(validEntries);
        period.PortExitTS = trialTS.PortExitTS(validEntries);
    else
        period.(fieldName) = timestamps(timestamps >= start & timestamps <= stop);
    end
end
end


function analysis = analyzePeriod(period, cueTime, sucroseDelay, factor)
% Adjustments for direct structure access and error handling for empty inputs
analysis = struct();

%     if isempty(period.ActiveTS) || isempty(period.SucroseTS)
%         analysis.rewardedNosepokes = 0;
%         analysis.unrewardedNosepokes = 0;
%         analysis.probRewardedNosepoke = NaN;
%         analysis.unrewardedBetweenRewarded = NaN;
%         analysis.latencyFirstRewarded = 30;
%         analysis.latencyRewarded = 30;
%         analysis.latencyUnRewarded = 30;
%         analysis.rewardPortDurations = 0;
%         analysis.portEntryBetweenRewardedNosepokes = 0;
%         analysis.portEntryBetweenUnRewardedNosepokes = 0;
%         return;
%     end

% Rest of the logic to identify rewarded and unrewarded nosepokes and perform calculations
[rewardedNosepokes, unrewardedNosepokes] = identifyRewardedNosepokes(period.ActiveTS, period.SucroseTS, sucroseDelay);

% Implementations for calculations based on identified nosepokes
analysis.rewardedNosepokes = numel(rewardedNosepokes);
analysis.unrewardedNosepokes = numel(unrewardedNosepokes);
analysis.probRewardedNosepoke = analysis.rewardedNosepokes / max(1, numel(period.ActiveTS));
analysis.unrewardedBetweenRewarded = calcUnrewardedBetween(rewardedNosepokes, unrewardedNosepokes);
analysis.portEntryBetweenRewardedNosepokes = calcPortEntriesBetween(period.PortEntryTS, rewardedNosepokes);

analysis.latencyRewarded = [calcLatencyFirstRewarded(cueTime, rewardedNosepokes) calcLatencyBetween(rewardedNosepokes)];
analysis.latencyRewarded = analysis.latencyRewarded/factor;
analysis.latencyToPortReward = calcLatencyToPortEntry(rewardedNosepokes, portEntryTS);
analysis.latencyReward = analysis.latencyReward/factor;
analysis.latencyUnRewarded = calcLatencyBetween(unrewardedNosepokes);
analysis.latencyUnRewarded = analysis.latencyUnRewarded/factor;
analysis.rewardPortDurations = calcPortDurations(period.PortEntryTS, period.PortExitTS);
analysis.rewardPortDurations = analysis.rewardPortDurations/factor;
end

function [rewardedNosepokes, unrewardedNosepokes] = identifyRewardedNosepokes(activeTS, sucroseTS, sucroseDelay)
rewardedNosepokes = [];
unrewardedNosepokes = [];
if isempty(activeTS)
    return;
end

for i = 1:length(activeTS)
    if isempty(sucroseTS)
        unrewardedNosepokes(end+1) = activeTS(i);
    else
        closestSucroseIndex = find(sucroseTS - activeTS(i) >= 0 & sucroseTS - activeTS(i) <= sucroseDelay, 1);
        if ~isempty(closestSucroseIndex)
            rewardedNosepokes(end+1) = activeTS(i);
        else
            unrewardedNosepokes(end+1) = activeTS(i);
        end
    end
end
end

function count = calcUnrewardedBetween(rewarded, unrewarded)
if length(rewarded)<2 || isempty(unrewarded)
    count = 0;
    return;
end
count = zeros(length(rewarded) - 1, 1);
for i = 1:(length(rewarded) - 1)
    count(i) = sum(unrewarded > rewarded(i) & unrewarded < rewarded(i+1));
end
end

function latency = calcLatencyFirstRewarded(cueTime, rewardedNosepokes)
if isempty(rewardedNosepokes)
    latency = 3000;
    return;
end
latency = (rewardedNosepokes(1) - cueTime);
end

function latencies = calcLatencyBetween(rewarded)
% Check if there are enough rewarded nosepokes to calculate latencies
if isempty(rewarded) || numel(rewarded) < 2
    latencies = 3000;
    return;
end

% Calculate differences between consecutive rewarded nosepokes
latencies = diff(rewarded);
end


function durations = calcPortDurations(entries, exits)
if isempty(entries) || isempty(exits)
    durations = 0;
    return;
end
durations = zeros(min(length(entries), length(exits)), 1);
for i = 1:length(durations)
    durations(i) = exits(i) - entries(i);
end
end

function counts = calcPortEntriesBetween(portEntries, rewarded)
if isempty(portEntries) || isempty(rewarded)
    counts = 0;
    return;
end
counts = zeros(length(rewarded), 1);
for i = 1:length(rewarded)
    prevReward = 0;
    if i > 1
        prevReward = rewarded(i-1);
    end
    nextReward = inf;
    if i < length(rewarded)
        nextReward = rewarded(i);
    end
    counts(i) = sum(portEntries > prevReward & portEntries < nextReward);
end
end

function latencies = calcLatencyToPortEntry(nosepokeTS, portEntryTS)
    if isempty(nosepokeTS) || isempty(portEntryTS)
        latencies = 3000;
        return;
    end

    for i = 1:length(nosepokeTS)
        % Find the first port entry timestamp that is greater than the current nosepoke timestamp
        subsequentEntries = portEntryTS(portEntryTS > nosepokeTS(i));
        if ~isempty(subsequentEntries)
            % Calculate latency as the difference between the first subsequent port entry and the nosepoke, adjusting by factor if necessary
            latencies(i) = (subsequentEntries(1) - nosepokeTS(i));
        end
    end
end
